/*!
 * Copyright (c) 2015-2017 Cisco Systems, Inc. See LICENSE file.
 */

import {SparkPlugin} from '@ciscospark/spark-core';
import uuid from 'uuid';

const Reaction = SparkPlugin.extend({
  namespace: 'Reaction',

  /**
  * helper function to create the request object
  * @param {Object} options
  * @returns {Object} the reaction request object
  */
  createReactionRequest(options) {
    return {
      method: 'POST',
      service: 'conversation',
      resource: '/activities',
      options: options.options,
      body:
      {
        clientTempId: uuid.v4(),
        objectType: 'activity',
        verb: options.verb,
        actor: {
          objectType: 'person',
          id: options.participant.id,
          entryUUID: options.participant.entryUUID
        },
        object: {
          objectType: 'messageProperty',
          tags: ['REACTIONS'],
          id: options.activityID,
          reactionType: options.reactionID
        },
        target: {
          id: options.convoID,
          url: options.targetURL,
          objectType: 'conversation'
        }
      }
    };
  },

  /**
  * helper function to verify options parameter
  * @param {Object} options
  * @returns {string} the rejection error message or null if options is good
  */
  rejectReactionOptions(options) {
    if (!options) {
      return '`options` is required';
    }
    if (!options.participant) {
      return '`options.participant` is required';
    }
    if (!options.activityID) {
      return '`options.activityID` is required';
    }
    if (!options.convoID) {
      return '`options.convoID` is required';
    }
    if (!options.targetURL) {
      return '`options.targetURL` is required';
    }
    return null;
  },

  /**
  * Add a reaction
  * @param {Object} options
  * @returns {Promise<Object>} Resolves with the reaction just added
  */
  add(options) {
    const shouldRejectOptions = this.rejectReactionOptions(options);
    if (shouldRejectOptions) {
      return Promise.reject(new Error(shouldRejectOptions));
    }

    const reactionParams = options;
    reactionParams.verb = 'add';
    reactionParams.reactionID = '';

    const requestObject = this.createReactionRequest(reactionParams);

    return this.spark.request(requestObject)
      .then((res) => res.body);
  },

  /**
  * Add a reaction
  * @param {Object} options
  * @returns {Promise<Object>} Resolves with the reaction just added
  */
  delete(options) {
    const shouldRejectOptions = this.rejectReactionOptions(options);
    if (shouldRejectOptions) {
      return Promise.reject(new Error(shouldRejectOptions));
    }
    if (!options.reactionID) {
      return Promise.reject(new Error('`options.reactionID` is required'));
    }

    const reactionParams = options;
    reactionParams.verb = 'delete';

    const requestObject = this.createReactionRequest(reactionParams);

    return this.spark.request(requestObject)
      .then((res) => res.body);
  }

});

export default Reaction;
