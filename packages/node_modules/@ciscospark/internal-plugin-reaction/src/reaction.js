/*!
 * Copyright (c) 2015-2017 Cisco Systems, Inc. See LICENSE file.
 */

import {SparkPlugin} from '@ciscospark/spark-core';
import uuid from 'uuid';

/**
 * @typedef {Object} ReactionObject
 * @property {object} participant - an actor with an id and entryUUID
 * @property {string} activityID - the id of the activity being reacted upon
 * @property {string} convoID - the id of the target conversation
 * @property {string} targetURL - url of the target conversation
 * @property {string} reactionID - (optional) the id of the reaction to be changed
 */

const Reaction = SparkPlugin.extend({
  namespace: 'Reaction',

  /**
  * helper function to create the request object
  * @param {Object} options
  * @returns {Object} the reaction request object
  */
  createReactionRequestBody(options) {
    return {
      clientTempId: uuid.v4(),
      objectType: 'activity',
      verb: options.verb,
      actor: {
        objectType: 'person',
        id: options.participant.id,
        entryUUID: options.participant.entryUUID
      },
      object: {
        objectType: 'messageProperty',
        tags: ['REACTIONS'],
        id: options.activityID,
        reactionType: options.reactionID
      },
      target: {
        id: options.convoID,
        url: options.targetURL,
        objectType: 'conversation'
      }
    };
  },

  /**
  * helper function to validate a ReactionObject
  * @param {ReactionObject} ReactionObject
  * @returns {string} the rejection error message or null if ReactionObject is valid
  */
  validateReaction(ReactionObject) {
    if (!ReactionObject) {
      return '`ReactionObject` is required';
    }
    if (!ReactionObject.participant) {
      return '`ReactionObject.participant` is required';
    }
    if (!ReactionObject.activityID) {
      return '`ReactionObject.activityID` is required';
    }
    if (!ReactionObject.convoID) {
      return '`ReactionObject.convoID` is required';
    }
    if (!ReactionObject.targetURL) {
      return '`ReactionObject.targetURL` is required';
    }
    return null;
  },

  /**
  * Add a reaction
  * @param {ReactionObject} ReactionObject
  * @returns {Promise<ReactionObject>} Resolves with the reaction just added
  */
  add(ReactionObject) {
    const reactionNotValidated = this.validateReaction(ReactionObject);
    if (reactionNotValidated) {
      return Promise.reject(new Error(reactionNotValidated));
    }

    const reactionParams = ReactionObject;
    reactionParams.verb = 'add';
    reactionParams.reactionID = '';

    return this.request({
      method: 'POST',
      service: 'conversation',
      resource: '/activities',
      body: this.createReactionRequestBody(reactionParams)
    })
      .then((res) => res.body);
  },

  /**
  * Delete a reaction
  * @param {ReactionObject} ReactionObject
  * @returns {Promise}
  */
  delete(ReactionObject) {
    const reactionNotValidated = this.validateReaction(ReactionObject);
    if (reactionNotValidated) {
      return Promise.reject(new Error(reactionNotValidated));
    }
    if (!ReactionObject.reactionID) {
      return Promise.reject(new Error('`ReactionObject.reactionID` is required'));
    }

    const reactionParams = ReactionObject;
    reactionParams.verb = 'delete';

    return this.request({
      method: 'POST',
      service: 'conversation',
      resource: '/activities',
      body: this.createReactionRequestBody(reactionParams)
    })
      .then((res) => res.body);
  }

});

export default Reaction;
