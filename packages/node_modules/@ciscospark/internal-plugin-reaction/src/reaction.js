/*!
 * Copyright (c) 2015-2017 Cisco Systems, Inc. See LICENSE file.
 */

import {SparkPlugin} from '@ciscospark/spark-core';
import uuid from 'uuid';

const Reaction = SparkPlugin.extend({
  namespace: 'Reaction',

  /**
  * Add a reaction
  * @param {Object} options
  * @returns {Promise<Object>} Resolves with the reaction just added
  */
  add(options) {
    if (!options) {
      return Promise.reject(new Error('`options` is required'));
    }

    if (!options.participant) {
      return Promise.reject(new Error('`options.participant` is required'));
    }
    if (!options.reactionList) {
      return Promise.reject(new Error('`options.reactionList` is required'));
    }
    if (!options.actID) {
      return Promise.reject(new Error('`options.actID` is required'));
    }
    if (!options.convoID) {
      return Promise.reject(new Error('`options.convoID` is required'));
    }
    if (!options.targetURL) {
      return Promise.reject(new Error('`options.targetURL` is required'));
    }

    const requestObject = {
      method: 'POST',
      service: 'conversation',
      resource: '/activities',
      options,
      body:
      {
        clientTempId: uuid.v4(),
        objectType: 'activity',
        verb: 'add',
        actor: {
          objectType: 'person',
          id: options.participant.id,
          entryUUID: options.participant.entryUUID
        },
        object: {
          objectType: 'messageProperty',
          tags: options.reactionList,
          id: options.actID,
          reactionType: ''
        },
        target: {
          id: options.convoID,
          url: options.targetURL,
          objectType: 'conversation'
        }
      }
    };

    return this.spark.request(requestObject)
      .then((res) => res.body);
  }

});

export default Reaction;
